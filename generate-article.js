/**
 * generate-article.js
 * v5.2 (Fix & Enhanced Logging)
 * * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–µ—á–∞—Ç–∫–∞ `getGenerModel` -> `getGenerativeModel`.
 * * –£–õ–£–ß–®–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö
 * –æ–ø–µ—Ä–∞—Ü–∏–π, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –∫–∞–∫–æ–π —ç—Ç–∞–ø –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.
 */
import { GoogleGenerativeAI } from "@google/generative-ai";
import fs from "fs";

// –ò–º–ø–æ—Ä—Ç —Å–±–æ—Ä—â–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
import { getWeatherData } from "./api/met-no-api.js";
import { getGlobalEventsData } from "./api/nasa-api.js";
import { getHistoricalRecord } from "./api/open-meteo-api.js";

// –ò–º–ø–æ—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤
import { generateLocalForecastSection } from "./modules/local-forecast.js";
import { generateGlobalEventsSection } from "./modules/global-events.js";
import { generateHistoricalContextSection } from "./modules/historical-context.js";

// –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã —Ñ–∞–∫—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ /data/
import { weatherFacts } from "./data/weather-facts.js";

/* ========================================================================== */
/* 0. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø                                                           */
/* ========================================================================== */

const CONFIG = {
  LOCATION: { LAT: 56.95, LON: 24.1, TIMEZONE: "Europe/Riga" },
  API: { USER_AGENT: "WeatherBloggerApp/2.0 (+https://github.com/meteomonster/weather-blogger)" },
  GEMINI: {
    MODEL: "gemini-1.5-flash-latest",
    GENERATION_CONFIG: { temperature: 0.8, topP: 0.9, topK: 40, maxOutputTokens: 3000 },
  },
  OUTPUT: {
    ARCHIVE_PREFIX: "article",
    LATEST_FILENAME: "latest-article.json",
    USED_FACTS_LOG: "used-facts-log.json",
  },
};

/* ========================================================================== */
/* 1. –ì–õ–ê–í–ù–´–ô –ó–ê–ü–£–°–ö                                                          */
/* ========================================================================== */

(async () => {
  const timeOfDay = (process.argv[2] || "morning").toLowerCase();
  const timeOfDayRu = { morning: "—É—Ç—Ä–µ–Ω–Ω–∏–π", afternoon: "–¥–Ω–µ–≤–Ω–æ–π", evening: "–≤–µ—á–µ—Ä–Ω–∏–π", night: "–Ω–æ—á–Ω–æ–π" }[timeOfDay] || timeOfDay;
  
  console.log(`üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${timeOfDayRu})...`);

  try {
    // --- –≠–¢–ê–ü 1: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö ---
    console.log("üìä [1/4] –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)...");
    const [weatherData, globalEvents, historicalData] = await Promise.all([
        logPromise(getWeatherData({ ...CONFIG.LOCATION, ...CONFIG.API }), "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã (MET.NO)"),
        logPromise(getGlobalEventsData(), "–ú–∏—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è (NASA)"),
        logPromise(getHistoricalRecord(new Date(), { ...CONFIG.LOCATION, ...CONFIG.API }), "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ—Ä–¥—ã (Open-Meteo)")
    ]);
    const funFact = getUniqueRandomFact();
    console.log("    ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã");

    // --- –≠–¢–ê–ü 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ ---
    console.log("‚úçÔ∏è  [2/4] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ —Å—Ç–∞—Ç—å–∏ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)...");
    const geminiConfig = {
        genAI: new GoogleGenerativeAI(process.env.GEMINI_API_KEY),
        modelName: CONFIG.GEMINI.MODEL,
        generationConfig: CONFIG.GEMINI.GENERATION_CONFIG,
        location: CONFIG.LOCATION,
    };
    
    const [localSection, globalSection, historySection] = await Promise.all([
        logPromise(generateLocalForecastSection(weatherData, geminiConfig), "–ê–±–∑–∞—Ü –æ –ø—Ä–æ–≥–Ω–æ–∑–µ"),
        logPromise(generateGlobalEventsSection(globalEvents, geminiConfig), "–ê–±–∑–∞—Ü –æ —Å–æ–±—ã—Ç–∏—è—Ö"),
        logPromise(generateHistoricalContextSection(historicalData, funFact, geminiConfig), "–ê–±–∑–∞—Ü –æ–± –∏—Å—Ç–æ—Ä–∏–∏")
    ]);
    console.log("    ‚úÖ –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã");

    // --- –≠–¢–ê–ü 3: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å—Ç–∞—Ç—å–∏ ---
    console.log("üìù [3/4] –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç—å–∏...");
    const finalPrompt = `
–¢–≤–æ—è —Ä–æ–ª—å: –ì–ª–∞–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –±–ª–æ–≥–∞ –æ –ø–æ–≥–æ–¥–µ –≤ –†–∏–≥–µ. –¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî –∂–∏–≤–æ–π, —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π, —Å –ª–µ–≥–∫–æ–π –∏—Ä–æ–Ω–∏–µ–π.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –°–æ–±—Ä–∞—Ç—å –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –∞–±–∑–∞—Ü–µ–≤, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç–≤–æ–∏–º–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏, –µ–¥–∏–Ω—É—é, –≥–ª–∞–¥–∫—É—é –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é. –¢–≤–æ—è —Ä–∞–±–æ—Ç–∞ ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å —è—Ä–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–∏–ª—å–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –ª–æ–≥–∏—á–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏. –ù–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π —Ç–µ–∫—Å—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤, –∞ –∏–º–µ–Ω–Ω–æ –∫–æ–º–ø–æ–Ω—É–π –µ–≥–æ.

–í–æ—Ç –≥–æ—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ –æ—Ç —Ç–≤–æ–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤:

<–õ–û–ö–ê–õ–¨–ù–´–ô_–ü–†–û–ì–ù–û–ó_–†–ò–ì–ê>
${localSection}
</–õ–û–ö–ê–õ–¨–ù–´–ô_–ü–†–û–ì–ù–û–ó_–†–ò–ì–ê>

<–ì–õ–û–ë–ê–õ–¨–ù–´–ï_–°–û–ë–´–¢–ò–Ø>
${globalSection}
</–ì–õ–û–ë–ê–õ–¨–ù–´–ï_–°–û–ë–´–¢–ò–Ø>

<–ò–°–¢–û–†–ò–Ø_–ò_–§–ê–ö–¢–´>
${historySection}
</–ò–°–¢–û–†–ò–Ø_–ò_–§–ê–ö–¢–´>

–¢–µ–ø–µ—Ä—å —Å–æ–±–µ—Ä–∏ –∏–∑ —ç—Ç–æ–≥–æ —Ü–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é –¥–ª—è ${timeOfDayRu} –≤—ã–ø—É—Å–∫–∞.
`;
    
    const model = geminiConfig.genAI.getGenerativeModel({ model: geminiConfig.modelName, generationConfig: geminiConfig.generationConfig });
    const result = await model.generateContent(finalPrompt);
    const articleText = result.response.text().trim();
    
    console.log("\n=== –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è ===\n");
    console.log(articleText);
    console.log("\n========================\n");
    
    // --- –≠–¢–ê–ü 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ---
    console.log("üíæ [4/4] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...");
    saveArticle(articleText, timeOfDay, CONFIG.GEMINI.MODEL);
    console.log("\nüéâ –ì–æ—Ç–æ–≤–æ!");

  } catch (error) {
    console.error("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:", error.message, error.stack);
    process.exit(1);
  }
})();


/* ========================================================================== */
/* 2. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò                                                 */
/* ========================================================================== */

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–º–∏—Å–æ–≤, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.
 * @param {Promise} promise –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è.
 * @param {string} name –ò–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∞.
 * @returns {Promise}
 */
function logPromise(promise, name) {
    console.log(`    -> –ó–∞–ø—É—Å–∫–∞—é: ${name}...`);
    return promise.then(result => {
        console.log(`    ‚úÖ –ì–æ—Ç–æ–≤–æ: ${name}`);
        return result;
    });
}

function getUniqueRandomFact() {
  let usedIndices = [];
  try {
    if (fs.existsSync(CONFIG.OUTPUT.USED_FACTS_LOG)) {
      usedIndices = JSON.parse(fs.readFileSync(CONFIG.OUTPUT.USED_FACTS_LOG, "utf-8"));
    }
  } catch { usedIndices = []; }
  
  const allIndices = Array.from(weatherFacts.keys());
  let availableIndices = allIndices.filter(index => !usedIndices.includes(index));
  
  if (availableIndices.length === 0) {
    availableIndices = allIndices;
    usedIndices = [];
  }
  
  const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];
  usedIndices.push(randomIndex);
  fs.writeFileSync(CONFIG.OUTPUT.USED_FACTS_LOG, JSON.stringify(usedIndices, null, 2), "utf-8");
  
  return weatherFacts[randomIndex];
}

function saveArticle(articleText, timeOfDay, modelUsed) {
    const now = new Date();
    const fileDate = now.toISOString().slice(0, 10);
    const displayDate = now.toLocaleDateString("ru-RU", { day: "numeric", month: "long", year: "numeric", timeZone: CONFIG.LOCATION.TIMEZONE });
    
    const lines = articleText.split("\n");
    const title = lines[0]?.trim() || "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –†–∏–≥–µ";
    const content = lines.slice(1).join("\n").trim();
    
    const articleJson = { title, date: displayDate, time: timeOfDay, content, model: modelUsed };
    const archiveFileName = `${CONFIG.OUTPUT.ARCHIVE_PREFIX}-${fileDate}-${timeOfDay}.json`;
    
    fs.writeFileSync(archiveFileName, JSON.stringify(articleJson, null, 2), "utf-8");
    fs.writeFileSync(CONFIG.OUTPUT.LATEST_FILENAME, JSON.stringify(articleJson, null, 2), "utf-8");
    console.log(`    ‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ${archiveFileName} –∏ ${CONFIG.OUTPUT.LATEST_FILENAME}`);
}

