/**
 * generate-article.js
 * v6.2 (Plain Text & Sanitizer)
 * - –î–æ–±–∞–≤–ª–µ–Ω–æ: —Å—Ç—Ä–æ–≥–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –º–æ–¥–µ–ª–∏ "–±–µ–∑ Markdown/–∑–≤—ë–∑–¥–æ—á–µ–∫/–ª–∏—à–Ω–∏—Ö –∫–∞–≤—ã—á–µ–∫"
 * - –î–æ–±–∞–≤–ª–µ–Ω–æ: sanitizeArticle() ‚Äî –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—Å–Ω—è—Ç–∏–µ **, *, `, –º–∞—Ä–∫–µ—Ä–æ–≤ —Å–ø–∏—Å–∫–æ–≤, ¬´—É–º–Ω—ã—Ö¬ª –∫–∞–≤—ã—á–µ–∫)
 * - –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∏–∫—Å CONFIG ‚Üí local-forecast (–∏–∑ v6.1)
 */

import { GoogleGenerativeAI } from "@google/generative-ai";
import fs from "fs";

// –ò–º–ø–æ—Ä—Ç —Å–±–æ—Ä—â–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
import { getWeatherData } from "./api/met-no-api.js";
import { getGlobalEventsData } from "./api/nasa-api.js";
import { getHistoricalRecord } from "./api/open-meteo-api.js";
import { getAirQualityData } from "./api/air-quality-api.js";
import { getMarineData } from "./api/marine-api.js";
import { getSpaceWeatherData } from "./api/space-weather-api.js";
import { getGardeningData } from "./api/gardening-api.js";
import { getBioWeatherData } from "./api/bio-api.js";
import { getPhotographyData } from "./api/photography-api.js";

// –ò–º–ø–æ—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤
import { generateLocalForecastSection } from "./modules/local-forecast.js";
import { generateGlobalEventsSection } from "./modules/global-events.js";
import { generateHistoricalContextSection } from "./modules/historical-context.js";
import { generateAirQualitySection } from "./modules/air-quality.js";
import { generateMarineSection } from "./modules/marine-forecast.js";
import { generateAuroraSection } from "./modules/aurora-forecast.js";
import { generateGardenerCornerSection } from "./modules/gardener-corner.js";
import { generateBioForecastSection } from "./modules/bio-forecast.js";
import { generatePhotographyGuideSection } from "./modules/photography-guide.js";

// –ë–∞–∑–∞ —Ñ–∞–∫—Ç–æ–≤
import { weatherFacts } from "./data/weather-facts.js";

/* ========================================================================== */
/* 0. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø                                                            */
/* ========================================================================== */

const CONFIG = {
  LOCATION: { LAT: 56.95, LON: 24.1, TIMEZONE: "Europe/Riga" },
  API: { USER_AGENT: "WeatherBloggerApp/3.0 (+https://github.com/meteomonster/weather-blogger)" },
  GEMINI: {
    MODEL: process.env.GEMINI_MODEL_NAME || "gemini-1.5-flash",
    GENERATION_CONFIG: { temperature: 0.8, topP: 0.9, topK: 40, maxOutputTokens: 4000 },
  },
  OUTPUT: {
    ARCHIVE_PREFIX: "article",
    LATEST_FILENAME: "latest-article.json",
    USED_FACTS_LOG: "used-facts-log.json",
    SANITIZE: true,                     // <<< –ù–û–í–û–ï: –≤–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É
    STRIP_SMART_QUOTES: true,           // <<< –ù–û–í–û–ï: —É–±–∏—Ä–∞—Ç—å ¬´—É–º–Ω—ã–µ¬ª –∫–∞–≤—ã—á–∫–∏
    STRIP_MARKDOWN_EMPHASIS: true,      // <<< –ù–û–í–û–ï: —É–±–∏—Ä–∞—Ç—å **–∂–∏—Ä–Ω—ã–π** –∏ *–∫—É—Ä—Å–∏–≤*
    STRIP_LIST_MARKERS: true            // <<< –ù–û–í–û–ï: —É–±–∏—Ä–∞—Ç—å -/‚Ä¢/> –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
  },
};

/* ========================================================================== */
/* 1. –ì–õ–ê–í–ù–´–ô –ó–ê–ü–£–°–ö                                                          */
/* ========================================================================== */

(async () => {
  const timeOfDay = (process.argv[2] || "morning").toLowerCase();
  const timeOfDayRu = { morning: "—É—Ç—Ä–µ–Ω–Ω–∏–π", afternoon: "–¥–Ω–µ–≤–Ω–æ–π", evening: "–≤–µ—á–µ—Ä–Ω–∏–π", night: "–Ω–æ—á–Ω–æ–π" }[timeOfDay] || timeOfDay;

  console.log(`üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${timeOfDayRu})...`);

  try {
    const rigaDate = getTodayForTimezone(CONFIG.LOCATION.TIMEZONE);

    console.log("üìä [1/4] –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)...");
    const [
      weatherData,
      globalEvents,
      historicalData,
      airQualityData,
      marineData,
      spaceWeatherData,
      gardeningData,
      bioWeatherData,
      photoGuideData,
    ] = await Promise.all([
      logPromise(getWeatherData({ ...CONFIG.LOCATION, ...CONFIG.API }), "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"),
      logPromise(getGlobalEventsData(), "–ú–∏—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è"),
      logPromise(getHistoricalRecord(rigaDate, { ...CONFIG.LOCATION, ...CONFIG.API }), "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ—Ä–¥—ã"),
      logPromise(getAirQualityData({ ...CONFIG.LOCATION, ...CONFIG.API }), "–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞"),
      logPromise(getMarineData({ ...CONFIG.LOCATION, ...CONFIG.API }), "–ú–æ—Ä—Å–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑"),
      logPromise(getSpaceWeatherData(), "–ö–æ—Å–º–æ–ø–æ–≥–æ–¥–∞"),
      logPromise(getGardeningData({ ...CONFIG.LOCATION, ...CONFIG.API }), "–ê–≥—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑"),
      logPromise(getBioWeatherData({ ...CONFIG.LOCATION, ...CONFIG.API }), "–ë–∏–æ–º–µ—Ç–µ–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"),
      logPromise(getPhotographyData({ ...CONFIG.LOCATION, ...CONFIG.API }), "–§–æ—Ç–æ-–≥–∏–¥"),
    ]);

    const [funFactRaw, closingFactRaw] = getUniqueRandomFacts(2);
    const funFact = funFactRaw ?? "–ü–æ–≥–æ–¥–∞ –ø–æ–ª–Ω–∞ —Å—é—Ä–ø—Ä–∏–∑–æ–≤ ‚Äî –º—ã —É–∂–µ –≥–æ—Ç–æ–≤–∏–º –Ω–æ–≤—ã–µ —Ñ–∞–∫—Ç—ã.";
    const closingFact = closingFactRaw ?? funFact;
    console.log("    ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã");

    console.log("‚úçÔ∏è  [2/4] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)...");
    const geminiConfig = {
      genAI: new GoogleGenerativeAI(process.env.GEMINI_API_KEY),
      modelName: CONFIG.GEMINI.MODEL,
      generationConfig: CONFIG.GEMINI.GENERATION_CONFIG,
    };

    const [
      localSection,
      globalSection,
      historySection,
      airQualitySection,
      marineSection,
      auroraSection,
      gardenerSection,
      bioSection,
      photoSection,
    ] = await Promise.all([
      // –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞—ë–º CONFIG (—Ñ–∏–∫—Å v6.1)
      logPromise(generateLocalForecastSection(weatherData, geminiConfig, CONFIG), "–ê–±–∑–∞—Ü –æ –ø—Ä–æ–≥–Ω–æ–∑–µ"),
      logPromise(generateGlobalEventsSection(globalEvents, geminiConfig), "–ê–±–∑–∞—Ü –æ —Å–æ–±—ã—Ç–∏—è—Ö"),
      logPromise(generateHistoricalContextSection(historicalData, funFact, geminiConfig), "–ê–±–∑–∞—Ü –æ–± –∏—Å—Ç–æ—Ä–∏–∏"),
      logPromise(generateAirQualitySection(airQualityData, geminiConfig), "–ê–±–∑–∞—Ü –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞"),
      logPromise(
        generateMarineSection(marineData, geminiConfig, {
          date: rigaDate,
          timezone: CONFIG.LOCATION.TIMEZONE,
          weatherData,
        }),
        "–ê–±–∑–∞—Ü –æ –º–æ—Ä–µ"
      ),
      logPromise(generateAuroraSection(spaceWeatherData, geminiConfig), "–ê–±–∑–∞—Ü –æ —Å–µ–≤–µ—Ä–Ω–æ–º —Å–∏—è–Ω–∏–∏"),
      logPromise(generateGardenerCornerSection(gardeningData), "–£–≥–æ–ª–æ–∫ —Å–∞–¥–æ–≤–æ–¥–∞"),
      logPromise(generateBioForecastSection(bioWeatherData, airQualityData), "–ë–∏–æ–ø—Ä–æ–≥–Ω–æ–∑"),
      logPromise(generatePhotographyGuideSection(photoGuideData), "–ì–∏–¥ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞"),
    ]);
    console.log("    ‚úÖ –†–∞–∑–¥–µ–ª—ã –ø–æ–ª—É—á–µ–Ω—ã");

    const sectionDefinitions = [
      { key: "local", label: "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é", tag: "–õ–û–ö–ê–õ–¨–ù–´–ô_–ü–†–û–ì–ù–û–ó_–†–ò–ì–ê", text: localSection },
      { key: "global", label: "–°–æ–±—ã—Ç–∏—è –≤ –º–∏—Ä–µ", tag: "–ì–õ–û–ë–ê–õ–¨–ù–´–ï_–°–û–ë–´–¢–ò–Ø", text: globalSection },
      { key: "history", label: "–ò—Å—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–∫—Ç—ã", tag: "–ò–°–¢–û–†–ò–Ø_–ò_–§–ê–ö–¢–´", text: historySection },
      { key: "air", label: "–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞", tag: "–ö–ê–ß–ï–°–¢–í–û_–í–û–ó–î–£–•–ê", text: airQualitySection },
      { key: "marine", label: "–ú–æ—Ä—Å–∫–æ–π –≤–µ—Å—Ç–Ω–∏–∫", tag: "–ú–û–†–°–ö–û–ô_–í–ï–°–¢–ù–ò–ö", text: marineSection },
      { key: "garden", label: "–£–≥–æ–ª–æ–∫ —Å–∞–¥–æ–≤–æ–¥–∞", tag: "–£–ì–û–õ–û–ö_–°–ê–î–û–í–û–î–ê", text: gardenerSection },
      { key: "bio", label: "–ë–∏–æ–ø—Ä–æ–≥–Ω–æ–∑", tag: "–ë–ò–û–ü–†–û–ì–ù–û–ó", text: bioSection },
      { key: "photo", label: "–ì–∏–¥ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞", tag: "–§–û–¢–û–ì–ò–î", text: photoSection },
      { key: "aurora", label: "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –¥–æ–∑–æ—Ä", tag: "–ö–û–°–ú–ò–ß–ï–°–ö–ò–ô_–î–û–ó–û–†", text: auroraSection },
    ];

    sectionDefinitions
      .filter((section) => !section.text || !String(section.text).trim())
      .forEach((section) =>
        console.log(`    ‚ÑπÔ∏è –†–∞–∑–¥–µ–ª "${section.label}" –ø—Ä–æ–ø—É—â–µ–Ω ‚Äî –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.`)
      );

    const availableSections = sectionDefinitions.filter(
      (section) => typeof section.text === "string" && section.text.trim().length > 0
    );

    if (!availableSections.length) {
      throw new Error("–ù–µ—Ç –±–ª–æ–∫–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏ —Å—Ç–∞—Ç—å–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö.");
    }

    console.log(
      `    üìö –í –≤—ã–ø—É—Å–∫ –≤–æ–π–¥—É—Ç –±–ª–æ–∫–∏: ${availableSections.map((section) => section.label).join(", ")}`
    );

    const blockInstruction = availableSections
      .map(
        (section, idx) =>
          `${idx + 1}. ${section.label} ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏ <${section.tag}>‚Ä¶</${section.tag}>.`
      )
      .join("\n");

    const blocksPayload = availableSections
      .map((section) => `<${section.tag}>\n${section.text}\n</${section.tag}>`)
      .join("\n\n");

    const blockNames = availableSections.map((section) => section.label).join(" ‚Üí ");

    console.log("üìù [3/4] –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç—å–∏...");
    const finalPrompt = `
–¢–≤–æ—è —Ä–æ–ª—å: –ì–ª–∞–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ —Ü–µ–ª—å–Ω—É—é –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é –¥–ª—è ${timeOfDayRu} –≤—ã–ø—É—Å–∫–∞ –ø–æ–≥–æ–¥–Ω–æ–≥–æ –±–ª–æ–≥–∞ –†–∏–≥–∏.

–ñ—ë—Å—Ç–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:
- –ü–ò–®–ò –¢–û–õ–¨–ö–û –ü–†–û–°–¢–û–ô –¢–ï–ö–°–¢ –ë–ï–ó MARKDOWN.
- –ù–∏–∫–∞–∫–∏—Ö **–∑–≤—ë–∑–¥–æ—á–µ–∫**, _–ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π_, #–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, >—Ü–∏—Ç–∞—Ç, —Å–ø–∏—Å–∫–æ–≤ —Å ¬´-¬ª/¬´‚Ä¢¬ª.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–∏–ø–æ–≥—Ä–∞—Ñ—Å–∫–∏–µ –∫–∞–≤—ã—á–∫–∏ ¬´‚Ä¶¬ª/‚Äû‚Ä¶‚Äú/‚Äú‚Ä¶‚Äù ‚Äî –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø—Ä—è–º–∞—è —Ä–µ—á—å, –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—ã—á–Ω—ã–µ "–¥–≤–æ–π–Ω—ã–µ" —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Ñ—Ä–∞–∑—ã, –Ω–æ –≤ —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ –ø—Ä—è–º–æ–π —Ä–µ—á–∏ –Ω–µ—Ç.
- –ù–µ —Å—Ç–∞–≤—å —Å–ª–æ–≤–∞ –≤ –∫–∞–≤—ã—á–∫–∏ ¬´–¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã¬ª.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å —è—Ä–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç—ë–ø–ª–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –ª–æ–≥–∏—á–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ. –ú–µ–∂–¥—É –≥–æ—Ç–æ–≤—ã–º–∏ –±–ª–æ–∫–∞–º–∏ —Å–¥–µ–ª–∞–π –ø–ª–∞–≤–Ω—ã–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã. –ù–ï –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π —Ç–µ–∫—Å—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤, –∞ –∫–æ–º–ø–æ–Ω—É–π –µ–≥–æ –≤ –µ–¥–∏–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç—å–∏:
1) –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞).
2) –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
3) –î–∞–ª—å—à–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ (–ø–æ –ø–æ—Ä—è–¥–∫—É): ${blockNames}.
   –î–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —á–µ–∫-–ª–∏—Å—Ç–æ–º:
${blockInstruction}
   –ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –±–ª–æ–∫–æ–º ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥–≤–æ–¥–∫–∞ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ). –°–∞–º —Ç–µ–∫—Å—Ç –±–ª–æ–∫–∞ –æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫).
4) –ö–æ—Ä–æ—Ç–∫–∏–π –≤—ã–≤–æ–¥ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
5) –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª ¬´–ü–æ—Å–ª–µ—Å–ª–æ–≤–∏–µ¬ª (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–∞–∫—Ç: ${closingFact}

–ì–æ—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏:
${blocksPayload}`.trim();

    const model = geminiConfig.genAI.getGenerativeModel({
      model: geminiConfig.modelName,
      generationConfig: geminiConfig.generationConfig,
    });

    const result = await model.generateContent(finalPrompt);
    let articleText = result.response.text().trim();

    if (CONFIG.OUTPUT.SANITIZE) {
      const before = articleText.length;
      articleText = sanitizeArticle(articleText, {
        stripMarkdown: CONFIG.OUTPUT.STRIP_MARKDOWN_EMPHASIS,
        stripSmartQuotes: CONFIG.OUTPUT.STRIP_SMART_QUOTES,
        stripListMarkers: CONFIG.OUTPUT.STRIP_LIST_MARKERS,
      });
      const after = articleText.length;
      console.log(`üßπ –°–∞–Ω–∏—Ç–∞–π–∑–µ—Ä: –æ—á–∏—â–µ–Ω–æ ${(before-after)>=0?(before-after):0} —Å–∏–º–≤–æ–ª–æ–≤, –∏—Ç–æ–≥–æ–≤–∞—è –¥–ª–∏–Ω–∞ ${after}`);
    }

    console.log("\n=== –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è ===\n");
    console.log(articleText);
    console.log("\n========================\n");

    console.log("üíæ [4/4] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...");
    saveArticle(articleText, timeOfDay, CONFIG.GEMINI.MODEL);
    console.log("\nüéâ –ì–æ—Ç–æ–≤–æ!");

  } catch (error) {
    console.error("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:", error.message, error.stack);
    process.exit(1);
  }
})();

/* ========================================================================== */
/* 2. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò                                                 */
/* ========================================================================== */

function getTodayForTimezone(timeZone) {
  const now = new Date();
  const parts = new Intl.DateTimeFormat('en-CA', { timeZone, year: 'numeric', month: '2-digit', day: '2-digit' }).formatToParts(now);
  const val = (t) => parts.find(p => p.type === t)?.value || '';
  const dateString = `${val('year')}-${val('month')}-${val('day')}`;
  return new Date(`${dateString}T12:00:00Z`);
}

function logPromise(promise, name) {
  console.log(`    -> –ó–∞–ø—É—Å–∫–∞—é: ${name}...`);
  return promise.then(result => { console.log(`    ‚úÖ –ì–æ—Ç–æ–≤–æ: ${name}`); return result; });
}

function getUniqueRandomFacts(count = 1) {
  const logFile = CONFIG.OUTPUT.USED_FACTS_LOG;
  let usedIndices = [];
  try {
    if (fs.existsSync(logFile)) {
      const parsed = JSON.parse(fs.readFileSync(logFile, "utf-8"));
      if (Array.isArray(parsed)) usedIndices = parsed;
    }
  } catch { usedIndices = []; }

  const allIndices = weatherFacts.map((_, i) => i);
  const chosen = [];

  for (let i = 0; i < count; i++) {
    let available = allIndices.filter(idx => !usedIndices.includes(idx) && !chosen.includes(idx));
    if (available.length === 0) { usedIndices = []; available = allIndices.filter(idx => !chosen.includes(idx)); }
    if (available.length === 0) break;
    const rnd = available[Math.floor(Math.random() * available.length)];
    chosen.push(rnd);
  }

  const updatedLog = Array.from(new Set([...usedIndices, ...chosen]));
  fs.writeFileSync(logFile, JSON.stringify(updatedLog, null, 2), "utf-8");
  return chosen.map(i => weatherFacts[i]);
}

function sanitizeArticle(text, { stripMarkdown=true, stripSmartQuotes=true, stripListMarkers=true } = {}) {
  let s = text;

  if (stripMarkdown) {
    // **bold**, *italic*, __bold__, _italic_, `code`
    s = s.replace(/\*\*(.*?)\*\*/g, '$1')
         .replace(/__(.*?)__/g, '$1')
         .replace(/\*(.*?)\*/g, '$1')
         .replace(/_(.*?)_/g, '$1')
         .replace(/`([^`]*)`/g, '$1');
  }

  if (stripListMarkers) {
    // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫: -, ‚Ä¢, >
    s = s.replace(/(^|\n)\s*[-‚Ä¢>]\s+/g, '$1');
  }

  if (stripSmartQuotes) {
    // –£–±–∏—Ä–∞–µ–º ¬´—É–º–Ω—ã–µ¬ª –∫–∞–≤—ã—á–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è)
    s = s.replace(/[¬´¬ª‚Äû‚Äú‚Äù]/g, '');
  }

  // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –±–æ–ª—å—à–µ –¥–≤—É—Ö –ø–æ–¥—Ä—è–¥
  s = s.replace(/\n{3,}/g, '\n\n');

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
  s = s.replace(/\s+([.,!?;:])/g, '$1');

  return s.trim();
}

function saveArticle(articleText, timeOfDay, modelUsed) {
  const now = new Date();
  const fileDate = now.toISOString().slice(0, 10);
  const displayDate = now.toLocaleDateString("ru-RU", { day: "numeric", month: "long", year: "numeric", timeZone: CONFIG.LOCATION.TIMEZONE });

  const lines = articleText.split("\n");
  const title = (lines[0] || "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –†–∏–≥–µ").trim();
  const content = lines.slice(1).join("\n").trim();

  const articleJson = { title, date: displayDate, time: timeOfDay, content, model: modelUsed };
  const archiveFileName = `${CONFIG.OUTPUT.ARCHIVE_PREFIX}-${fileDate}-${timeOfDay}.json`;

  fs.writeFileSync(archiveFileName, JSON.stringify(articleJson, null, 2), "utf-8");
  fs.writeFileSync(CONFIG.OUTPUT.LATEST_FILENAME, JSON.stringify(articleJson, null, 2), "utf-8");
  console.log(`    ‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ${archiveFileName} –∏ ${CONFIG.OUTPUT.LATEST_FILENAME}`);
}
