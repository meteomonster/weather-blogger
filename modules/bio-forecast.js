/**
 * bio-forecast.js
 * –†–∞–∑–¥–µ–ª "–ë–∏–æ–ø—Ä–æ–≥–Ω–æ–∑" —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è.
 */

function toDate(iso) {
  return new Date(`${iso}T12:00:00Z`);
}

function formatDateLabel(iso, timezone, options) {
  const date = toDate(iso);
  return new Intl.DateTimeFormat("ru-RU", { timeZone: timezone, ...options }).format(date);
}

function describeUV(index) {
  if (typeof index !== "number") {
    return { level: "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", tip: "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–¥–µ–∫—Å –±–ª–∏–∂–µ –∫ –ø–æ–ª—É–¥–Ω—é." };
  }
  if (index < 3) return { level: `–Ω–∏–∑–∫–∏–π (${index.toFixed(1)})`, tip: "–º–æ–∂–Ω–æ –≥—É–ª—è—Ç—å –±–µ–∑ –æ–ø–∞—Å–∫–∏, –Ω–æ –æ—á–∫–∏ –Ω–µ –ø–æ–º–µ—à–∞—é—Ç." };
  if (index < 6) return { level: `—É–º–µ—Ä–µ–Ω–Ω—ã–π (${index.toFixed(1)})`, tip: "–∫ –ø–æ–ª—É–¥–Ω—é –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è SPF 30 –∏ –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä." };
  if (index < 8) return { level: `–≤—ã—Å–æ–∫–∏–π (${index.toFixed(1)})`, tip: "–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω SPF 50 –∏ —Ç–µ–Ω–∏—Å—Ç—ã–µ –ø–∞—É–∑—ã –ø–æ—Å–ª–µ 12:00." };
  return { level: `–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π (${index.toFixed(1)})`, tip: "–∏–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä—è–º–æ–≥–æ —Å–æ–ª–Ω—Ü–∞, –∏—â–∏—Ç–µ —Ç–µ–Ω—å –∏ –ø–µ–π—Ç–µ –≤–æ–¥—É." };
}

function describePollen(value) {
  if (typeof value !== "number") return null;
  if (value <= 0) return "–Ω–µ—Ç";
  if (value < 20) return `–Ω–∏–∑–∫–æ (${value.toFixed(0)})`;
  if (value < 60) return `—Å—Ä–µ–¥–Ω–µ (${value.toFixed(0)})`;
  return `–≤—ã—Å–æ–∫–æ (${value.toFixed(0)})`;
}

function describePressure(day) {
  if (typeof day.pressureAvg !== "number") {
    return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞–≤–ª–µ–Ω–∏—é";
  }
  const avg = Math.round(day.pressureAvg);
  const trend = typeof day.pressureTrend === "number" ? day.pressureTrend : 0;
  const trendText =
    trend > 4
      ? "—Ä–µ–∑–∫–æ —Ä–∞—Å—Ç—ë—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ —Ç—è–∂–µ—Å—Ç—å –≤ –≥–æ–ª–æ–≤–µ"
      : trend < -4
      ? "–ø–∞–¥–∞–µ—Ç, –±–µ—Ä–µ–∂—ë–º —Å–æ—Å—É–¥—ã"
      : "–±–µ–∑ —Ä–µ–∑–∫–∏—Ö —Å–∫–∞—á–∫–æ–≤";
  const span =
    typeof day.pressureMin === "number" && typeof day.pressureMax === "number"
      ? `(${Math.round(day.pressureMin)}‚Äì${Math.round(day.pressureMax)} hPa)`
      : "";
  return `${avg} hPa ${span} ‚Äî ${trendText}`;
}

function computeEnergy(day) {
  let score = 65;
  if (typeof day.apparentAvg === "number") {
    score -= Math.abs(day.apparentAvg - 20) * 1.2;
  }
  if (typeof day.humidityAvg === "number") {
    if (day.humidityAvg > 70) score -= (day.humidityAvg - 70) * 0.6;
    if (day.humidityAvg < 40) score -= (40 - day.humidityAvg) * 0.4;
  }
  if (typeof day.pressureAvg === "number") {
    score -= Math.abs(day.pressureAvg - 1016) * 0.15;
  }
  if (typeof day.pressureTrend === "number") {
    score -= Math.min(Math.abs(day.pressureTrend) * 1.5, 12);
  }
  if (typeof day.uvIndex === "number" && day.uvIndex > 7) {
    score -= 5;
  }

  score = Math.max(0, Math.min(100, score));
  const gauge = Math.round(score / 10);

  if (score >= 70) {
    return { label: `‚ö° –≠–Ω–µ—Ä–≥–∏—è ${gauge}/10`, text: "–¥–µ–Ω—å –±–æ–¥—Ä—ã–π, —Å–º–µ–ª–æ –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞." };
  }
  if (score >= 55) {
    return { label: `üôÇ –†–æ–≤–Ω–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ ${gauge}/10`, text: "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–º–ø, –Ω–µ –∑–∞–±—ã–≤–∞—è –æ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö –∏ –≤–æ–¥–µ." };
  }
  if (score >= 40) {
    return { label: `üò¥ –°–æ–Ω–ª–∏–≤–æ—Å—Ç—å ${gauge}/10`, text: "–æ—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–∞—É–∑—ã –∏ –ª—ë–≥–∫–∏–µ –ø–µ—Ä–µ–∫—É—Å—ã." };
  }
  return { label: `üõå –ú–∏–Ω–∏–º—É–º —Å–∏–ª ${gauge}/10`, text: "–ª—É—á—à–µ —Å–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –∏ –ø–æ–±–µ—Ä–µ—á—å —Å–µ–±—è." };
}

function describeTrend(trend) {
  if (typeof trend !== "number") return "–±–µ–∑ –∑–∞–º–µ—Ç–Ω—ã—Ö —Å–∫–∞—á–∫–æ–≤";
  if (trend > 4) return "–¥–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç—ë—Ç";
  if (trend < -4) return "–¥–∞–≤–ª–µ–Ω–∏–µ –ø–∞–¥–∞–µ—Ç";
  return "—Ñ–æ–Ω —Å—Ç–∞–±–∏–ª–µ–Ω";
}

export async function generateBioForecastSection(bioData, airQualityData) {
  if (!bioData || !bioData.days?.length) {
    return "üíö –ë–∏–æ–ø—Ä–æ–≥–Ω–æ–∑: –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.";
  }

  const timezone = bioData.timezone || "Europe/Riga";
  const today = bioData.days[0];
  const todayLabel = formatDateLabel(today.date, timezone, { weekday: "long", day: "numeric", month: "long" });
  const uv = describeUV(today.uvIndex);
  const pollenParts = [];
  if (airQualityData) {
    const birch = describePollen(airQualityData.birch_pollen);
    const grass = describePollen(airQualityData.grass_pollen);
    const ragweed = describePollen(airQualityData.ragweed_pollen);
    if (birch) pollenParts.push(`–±–µ—Ä—ë–∑–∞ ‚Äî ${birch}`);
    if (grass) pollenParts.push(`–∑–ª–∞–∫–∏ ‚Äî ${grass}`);
    if (ragweed) pollenParts.push(`–∞–º–±—Ä–æ–∑–∏—è ‚Äî ${ragweed}`);
  }
  const pollenText = pollenParts.length ? pollenParts.join(", ") : "–¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç";
  const pressureText = describePressure(today);
  const energy = computeEnergy(today);

  const outlookDays = bioData.days.slice(1, 3);
  const outlookLines = outlookDays.map((day) => {
    const label = formatDateLabel(day.date, timezone, { weekday: "short", day: "numeric" });
    const trend = describeTrend(day.pressureTrend);
    const uvShort = typeof day.uvIndex === "number" ? day.uvIndex.toFixed(1) : "?";
    const humidity = typeof day.humidityAvg === "number" ? `${Math.round(day.humidityAvg)}% –≤–ª–∞–∂–Ω–æ—Å—Ç–∏` : "–≤–ª–∞–∂–Ω–æ—Å—Ç—å –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö";
    return `- ${label}: –£–§ ${uvShort}, ${trend}, ${humidity}.`;
  });

  return [
    "üíö –ë–∏–æ–ø—Ä–æ–≥–Ω–æ–∑",
    `${todayLabel.charAt(0).toUpperCase()}${todayLabel.slice(1)} ‚Äî –∑–∞–±–æ—Ç–∏–º—Å—è –æ —Å–µ–±–µ:`,
    `‚òÄÔ∏è –£–§: ${uv.level}. ${uv.tip}`,
    `üåø –ü—ã–ª—å—Ü–∞: ${pollenText}.`,
    `‚öñÔ∏è –î–∞–≤–ª–µ–Ω–∏–µ: ${pressureText}.`,
    `${energy.label}: ${energy.text}`,
    outlookLines.length ? "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏:" : "",
    outlookLines.join("\n"),
  ]
    .filter(Boolean)
    .join("\n\n");
}
