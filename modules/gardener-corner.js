/**
 * gardener-corner.js
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª "–£–≥–æ–ª–æ–∫ —Å–∞–¥–æ–≤–æ–¥–∞" —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏ —Ç–∞–±–ª–∏—Ü–µ–π –Ω–µ–¥–µ–ª–∏.
 */

function toDate(iso) {
  return new Date(`${iso}T12:00:00Z`);
}

function formatDateLabel(iso, timezone, options) {
  const date = toDate(iso);
  return new Intl.DateTimeFormat("ru-RU", { timeZone: timezone, ...options }).format(date);
}

function formatTempRange(min, max) {
  if (typeof min !== "number" && typeof max !== "number") return "‚Äî";
  const format = (value) => `${value >= 0 ? "+" : ""}${Math.round(value)}¬∞C`;
  if (typeof min === "number" && typeof max === "number") {
    if (Math.abs(max - min) < 1) {
      return format((min + max) / 2);
    }
    return `${format(min)}‚Ä¶${format(max)}`;
  }
  const single = typeof min === "number" ? min : max;
  return format(single);
}

function formatMoistureRange(min, max) {
  if (typeof min !== "number" && typeof max !== "number") return "‚Äî";
  const toPercent = (value) => Math.round(value * 100);
  if (typeof min === "number" && typeof max === "number") {
    if (Math.abs(max - min) < 0.02) {
      return `${toPercent((min + max) / 2)}%`;
    }
    return `${toPercent(min)}‚Ä¶${toPercent(max)}%`;
  }
  const single = typeof min === "number" ? min : max;
  return `${toPercent(single)}%`;
}

function formatPercent(value) {
  if (typeof value !== "number") return "‚Äî";
  return `${Math.round(value * 100)}%`;
}

function formatList(list) {
  if (!list.length) return "‚Äî";
  if (list.length === 1) return list[0];
  return `${list.slice(0, -1).join(", ")} –∏ ${list[list.length - 1]}`;
}

function evaluatePlanting(day) {
  const temp = day.soilTempAvg;
  const moisture = day.soilMoistAvg;
  const precip = day.precipSum ?? 0;
  const precipProb = day.precipProbability ?? 0;

  if (typeof temp !== "number") return { status: "unknown", reason: "–Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Ä–º–æ–º–µ—Ç—Ä" };
  if (temp < 8) return { status: "too_cold", reason: "–ø–æ—á–≤–∞ –ª–µ–¥—è–Ω–∞—è" };
  if (temp < 10) return { status: "cold", reason: "–∑–µ–º–ª—è –µ—â—ë —Å—Ç—ã–Ω–µ—Ç" };
  if (temp > 27) return { status: "too_hot", reason: "–ø–æ—á–≤–∞ –ø–µ—Ä–µ–≥—Ä–µ–≤–∞–µ—Ç—Å—è" };
  if (typeof moisture === "number" && moisture < 0.16) return { status: "too_dry", reason: "–∑–µ–º–ª—è –ø–µ—Ä–µ—Å–æ—Ö–ª–∞" };
  if (typeof moisture === "number" && moisture > 0.42) return { status: "too_wet", reason: "–≥—Ä—è–¥–∫–∏ —Ä–∞—Å–∫–∏—Å–ª–∏" };
  if (precipProb > 70 && precip > 4) return { status: "rainy", reason: "–∏–¥—É—Ç –ø—Ä–æ–ª–∏–≤–Ω—ã–µ –¥–æ–∂–¥–∏" };
  if (precip > 8) return { status: "rainy", reason: "–ø–æ—á–≤–∞ —Ä–∞–∑–º–æ–∫–Ω–µ—Ç" };
  if (temp >= 12 && temp <= 23 && (!moisture || (moisture >= 0.18 && moisture <= 0.34)) && precip <= 4) {
    return { status: "ideal", reason: "–∑–µ–º–ª—è —Ç—ë–ø–ª–∞—è –∏ —É–ø—Ä—É–≥–∞—è" };
  }
  if (temp >= 10 && temp <= 25) {
    return { status: "ok", reason: "–º–æ–∂–Ω–æ –≤—ã—Å–∞–∂–∏–≤–∞—Ç—å –¥–Ω—ë–º" };
  }
  return { status: "watch", reason: "—É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–º–µ–Ω—á–∏–≤—ã–µ" };
}

function evaluateWatering(day) {
  const moisture = day.soilMoistAvg;
  const precip = day.precipSum ?? 0;
  if (typeof moisture !== "number") return { status: "unknown" };
  if (moisture < 0.18 && precip < 2) return { status: "needs", note: "–ø–æ—á–≤–∞ –ø—Ä–æ—Å–∏—Ç —Ö–æ—Ä–æ—à–µ–≥–æ –ø–æ–ª–∏–≤–∞" };
  if (moisture < 0.24 && precip < 4) return { status: "light", note: "–ª—ë–≥–∫–∏–π –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ–ª–∏–≤" };
  if (moisture > 0.35 || precip > 5) return { status: "skip", note: "–≤–ª–∞–≥–∞ –≤ –Ω–æ—Ä–º–µ" };
  return { status: "monitor", note: "–Ω–∞–±–ª—é–¥–∞–µ–º" };
}

function buildAction(day, planting, watering, coverAlert) {
  const actions = [];
  if (planting.status === "ideal") actions.push("–ø–æ—Å–∞–¥–∫–∞ (–∑–µ–º–ª—è —Ç—ë–ø–ª–∞—è)");
  if (planting.status === "ok") actions.push("–≤—ã—Å–∞–¥–∫–∞ –¥–Ω—ë–º —Å —É–∫—Ä—ã—Ç–∏–µ–º –Ω–∞ –Ω–æ—á—å");
  if (planting.status === "cold") actions.push("–ø–æ–∫–∞ –∑–∞–∫–∞–ª—è–π—Ç–µ —Ä–∞—Å—Å–∞–¥—É");
  if (planting.status === "too_cold") actions.push("—Ä–∞–Ω–æ –≤—ã—Å–∞–∂–∏–≤–∞—Ç—å");
  if (planting.status === "too_hot") actions.push("—Å–∞–∂–∞–π—Ç–µ –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ");
  if (planting.status === "too_wet") actions.push("–¥–∞–π—Ç–µ –≥—Ä—è–¥–∫–∞–º –ø—Ä–æ—Å–æ—Ö–Ω—É—Ç—å");
  if (planting.status === "too_dry") actions.push("–ø—Ä–æ–ª–µ–π—Ç–µ –∑–µ–º–ª—é –ø–µ—Ä–µ–¥ –ø–æ—Å–∞–¥–∫–æ–π");
  if (planting.status === "rainy") actions.push("–ø–µ—Ä–µ—Ä—ã–≤: –¥–æ–∂–¥–∏ —Ä–∞–∑–º—è–≥—á–∞—Ç –∑–µ–º–ª—é");

  if (watering.status === "needs") actions.push("–ø–æ–ª–∏–≤ –≤–µ—á–µ—Ä–æ–º");
  if (watering.status === "light") actions.push("–ª—ë–≥–∫–∏–π –ø–æ–ª–∏–≤ –∏–∑ –ª–µ–π–∫–∏");
  if (watering.status === "skip") actions.push("–ø–æ–ª–∏–≤ –Ω–µ –Ω—É–∂–µ–Ω");

  if (!actions.length) actions.push("–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∏ –ø—Ä–æ–ø–æ–ª–∫–∞");
  if (coverAlert) actions.push("—É–∫—Ä–æ–π—Ç–µ –Ω–µ–∂–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã –Ω–æ—á—å—é");
  return [...new Set(actions)].join(", ");
}

function collectFolkNotes(day, planting, watering, coverAlert, notesSet) {
  if (typeof day.soilTempAvg === "number" && day.soilTempAvg < 10) {
    notesSet.add("–ï—Å–ª–∏ –ø–æ—á–≤–∞ –Ω–∏–∂–µ +10 ¬∞C ‚Äî –Ω–µ —Å–µ–π –æ–≥—É—Ä—Ü—ã, –∏–Ω–∞—á–µ –∑–∞–≥–Ω–∏—é—Ç.");
  }
  if (typeof day.soilMoistAvg === "number" && day.soilMoistAvg < 0.15) {
    notesSet.add("–°—É—Ö–∞—è –∑–µ–º–ª—è —à–µ—Ä—à–∞–≤–∏—Ç –ª–∞–¥–æ–Ω–∏ ‚Äî –ø–æ—Ä–∞ –ø—Ä–æ–ª–∏—Ç—å –≥—Ä—è–¥–∫–∏ –ø–æ–¥ –≤–µ—á–µ—Ä.");
  }
  if (typeof day.soilMoistAvg === "number" && day.soilMoistAvg > 0.4) {
    notesSet.add("–ö–æ–≥–¥–∞ –∑–µ–º–ª—è –ª–∏–ø–Ω–µ—Ç –∫ –ª–æ–ø–∞—Ç–µ, –¥–∞–π –µ–π –ø—Ä–æ—Å–æ—Ö–Ω—É—Ç—å –∏ –ø—Ä–∏–∫—Ä–æ–π –ø–æ—Å–∞–¥–∫–∏ –º—É–ª—å—á–æ–π.");
  }
  if ((day.precipSum ?? 0) > 6) {
    notesSet.add("–ü–æ—Å–ª–µ –ø—Ä–æ–ª–∏–≤–Ω–æ–≥–æ –¥–æ–∂–¥—è –ø–æ—á–≤—É –ª—É—á—à–µ –Ω–µ —Ç—Ä–µ–≤–æ–∂–∏—Ç—å ‚Äî –¥–∞–π –µ–π –¥–µ–Ω—å –Ω–∞ –æ—Ç–¥—ã—Ö.");
  }
  if (coverAlert) {
    notesSet.add("–ü–æ–∫–∞ –Ω–æ—á–∏ —Ö–æ–ª–æ–¥–Ω—ã, —É–∫—Ä—ã–≤–∞–π —Ä–∞—Å—Å–∞–¥—É –ª—É—Ç—Ä–∞—Å–∏–ª–æ–º ‚Äî —É–±–µ—Ä–µ–∂—ë—à—å –æ—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏—Ö–≤–∞—Ç–∞.");
  }
  if (typeof day.soilTempAvg === "number" && day.soilTempAvg > 24) {
    notesSet.add("–ñ–∞—Ä–∫–∞—è –ø–æ—á–≤–∞ —Ç—Ä–µ–±—É–µ—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ–ª–∏–≤–∞ –∏ –ª—ë–≥–∫–æ–π –ø—Ä–∏—Ç–µ–Ω–∫–∏, —á—Ç–æ–±—ã –∫–æ—Ä–Ω–∏ –Ω–µ —Å–≤–∞—Ä–∏–ª–∏—Å—å.");
  }
}

export async function generateGardenerCornerSection(gardeningData) {
  if (!gardeningData || !gardeningData.days?.length) {
    return "üåø –£–≥–æ–ª–æ–∫ —Å–∞–¥–æ–≤–æ–¥–∞: –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—á–≤–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.";
  }

  const timezone = gardeningData.timezone || "Europe/Riga";
  const notesSet = new Set();

  const enhanced = gardeningData.days.map((day) => {
    const planting = evaluatePlanting(day);
    const watering = evaluateWatering(day);
    const coverAlert =
      (typeof day.airTempMin === "number" && day.airTempMin < 3) ||
      (typeof day.soilTempMin === "number" && day.soilTempMin < 5);

    collectFolkNotes(day, planting, watering, coverAlert, notesSet);

    return {
      ...day,
      planting,
      watering,
      coverAlert,
      labelShort: formatDateLabel(day.date, timezone, { weekday: "short", day: "numeric", month: "short" }),
      labelLong: formatDateLabel(day.date, timezone, { weekday: "long", day: "numeric", month: "long" }),
      action: buildAction(day, planting, watering, coverAlert),
    };
  });

  const bestPlanting = enhanced.filter((day) => day.planting.status === "ideal").map((day) => day.labelShort);
  const okPlanting = enhanced.filter((day) => day.planting.status === "ok").map((day) => day.labelShort);
  const wateringDays = enhanced
    .filter((day) => day.watering.status === "needs" || day.watering.status === "light")
    .map((day) => day.labelShort);
  const coverDays = enhanced.filter((day) => day.coverAlert).map((day) => day.labelShort);

  const today = enhanced[0];
  const warmest = enhanced.reduce((acc, day) => {
    if (typeof day.soilTempAvg !== "number") return acc;
    if (!acc || (typeof acc.soilTempAvg !== "number" && typeof day.soilTempAvg === "number")) return day;
    if (typeof acc.soilTempAvg !== "number") return day;
    return day.soilTempAvg > acc.soilTempAvg ? day : acc;
  }, null);
  const wettest = enhanced.reduce((acc, day) => {
    if (typeof day.precipSum !== "number") return acc;
    if (!acc || typeof acc.precipSum !== "number") return day;
    return day.precipSum > acc.precipSum ? day : acc;
  }, null);

  const introParts = [];
  if (typeof today.soilTempAvg === "number") {
    introParts.push(
      `–°–µ–≥–æ–¥–Ω—è –ø–æ—á–≤–∞ –¥–µ—Ä–∂–∏—Ç ${formatTempRange(today.soilTempMin, today.soilTempMax)} (—Å—Ä–µ–¥–Ω–µ–µ ${formatTempRange(today.soilTempAvg, today.soilTempAvg)}), –≤–ª–∞–∂–Ω–æ—Å—Ç—å –æ–∫–æ–ª–æ ${formatPercent(today.soilMoistAvg)}.`
    );
  }
  if (warmest && warmest.date !== today.date && typeof warmest.soilTempAvg === "number") {
    introParts.push(`–ö ${warmest.labelShort} –≥—Ä—É–Ω—Ç –ø—Ä–æ–≥—Ä–µ–µ—Ç—Å—è –¥–æ ${formatTempRange(warmest.soilTempAvg, warmest.soilTempAvg)} ‚Äî –º–æ–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–æ–≤—ã–µ –≤—ã—Å–∞–¥–∫–∏.`);
  }
  if (wettest && wettest.precipSum > 0) {
    introParts.push(`${wettest.labelShort} –ø—Ä–∏–Ω–µ—Å—ë—Ç ${wettest.precipSum.toFixed(1)} –º–º –æ—Å–∞–¥–∫–æ–≤, —É—á—Ç–∏—Ç–µ –ø–∞—É–∑—É –≤ —Ä–∞–±–æ—Ç–∞—Ö.`);
  }

  const tableHeader = `| –î–µ–Ω—å | –ü–æ—á–≤–∞ | –í–ª–∞–≥–∞ | –õ—É—á—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è |\n| --- | --- | --- | --- |`;
  const tableRows = enhanced
    .map((day) => {
      const soilRange = formatTempRange(day.soilTempMin, day.soilTempMax);
      const moistureRange = formatMoistureRange(day.soilMoistMin, day.soilMoistMax);
      return `| ${day.labelShort} | ${soilRange} | ${moistureRange} | ${day.action} |`;
    })
    .join("\n");
  const table = `${tableHeader}\n${tableRows}`;

  const summaryLines = [];
  if (bestPlanting.length) {
    summaryLines.push(`‚Ä¢ –õ—É—á—à–∏–µ –¥–Ω–∏ –¥–ª—è –ø–æ—Å–∞–¥–æ–∫: ${formatList(bestPlanting)}.`);
  } else if (okPlanting.length) {
    summaryLines.push(`‚Ä¢ –ê–∫–∫—É—Ä–∞—Ç–Ω—ã–µ –ø–æ—Å–∞–¥–∫–∏ –ø–æ–¥ —É–∫—Ä—ã—Ç–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã: ${formatList(okPlanting)}.`);
  } else {
    summaryLines.push("‚Ä¢ –° –ø–æ—Å–∞–¥–∫–∞–º–∏ –ª—É—á—à–µ –ø–æ–≤—Ä–µ–º–µ–Ω–∏—Ç—å ‚Äî —Å–ª–µ–¥–∏–º –∑–∞ –ø–æ—á–≤–µ–Ω–Ω—ã–º —Ç–µ–ø–ª–æ–º.");
  }
  if (wateringDays.length) {
    summaryLines.push(`‚Ä¢ –ü–æ–ª–∏–≤ —Å—Ç–æ–∏—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ ${formatList(wateringDays)}.`);
  } else {
    summaryLines.push("‚Ä¢ –ü–æ–ª–∏–≤ –ø–æ–∫–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω ‚Äî –≤–ª–∞–≥–∞ –¥–µ—Ä–∂–∏—Ç—Å—è –≤ –Ω–æ—Ä–º–µ.");
  }
  if (coverDays.length) {
    summaryLines.push(`‚Ä¢ –£–∫—Ä—ã—Ç–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –Ω–æ—á–∏ ${formatList(coverDays)}.`);
  }

  const folkNotes = Array.from(notesSet);
  const folkBlock = folkNotes.length
    ? `–ù–∞—Ä–æ–¥–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏:\n${folkNotes.map((note) => `- ${note}`).join("\n")}`
    : "";

  const intro = introParts.join(" ") || "–ù–∞ –Ω–µ–¥–µ–ª–µ —Å–ª–µ–¥–∏–º –∑–∞ –ø—Ä–æ–≥—Ä–µ–≤–æ–º –∏ –≤–ª–∞–≥–æ–π –ø–æ—á–≤—ã, —á—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –æ–∫–Ω–æ.";

  return [`üåø –£–≥–æ–ª–æ–∫ —Å–∞–¥–æ–≤–æ–¥–∞`, intro, table, "–ì–ª–∞–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–µ–¥–µ–ª–∏:", ...summaryLines, folkBlock].filter(Boolean).join("\n\n");
}
