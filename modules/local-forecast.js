/**
 * local-forecast.js
 * v2.1 (Robustness Fix)
 * - –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ API
 * –Ω–µ –≤–µ—Ä–Ω–µ—Ç –æ–¥–∏–Ω –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, wind_speed_10m_max), —Å–∫—Ä–∏–ø—Ç
 * –Ω–µ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É 'Cannot read properties of undefined (reading 'map')',
 * –∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.
 */

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã—Ö –¥–∞—Ç
function buildDateLabels(dailyTime, tz) {
  if (!tz) {
    throw new Error("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (tz) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ buildDateLabels.");
  }
  const getLocalDate = (date) => new Date(date.toLocaleString("sv-SE", { timeZone: tz })).toISOString().slice(0, 10);
  const todayStr = getLocalDate(new Date());
  const tomorrowStr = getLocalDate(new Date(Date.now() + 864e5));
  return dailyTime.map((iso) => {
    const d = new Date(`${iso}T00:00:00Z`);
    const human = new Intl.DateTimeFormat("ru-RU", { day: "numeric", month: "long", timeZone: tz }).format(d);
    const weekday = new Intl.DateTimeFormat("ru-RU", { weekday: "long", timeZone: tz }).format(d).toLowerCase();
    if (iso === todayStr) return `–°–µ–≥–æ–¥–Ω—è, ${human}`;
    if (iso === tomorrowStr) return `–ó–∞–≤—Ç—Ä–∞, ${human}`;
    const needsO = /^(–≤|—Å)/.test(weekday) ? "–æ" : "";
    return `–í${needsO} ${weekday}, ${human}`;
  });
}

const HEADING = "üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é";

export async function generateLocalForecastSection(weatherData, geminiConfig, CONFIG) {
  if (!weatherData) {
    return `${HEADING}\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–Ω–æ–π –ø–æ–≥–æ–¥–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.`;
  }
  if (!CONFIG || !CONFIG.LOCATION || !CONFIG.LOCATION.TIMEZONE) {
    throw new Error("–û–±—ä–µ–∫—Ç CONFIG —Å TIMEZONE –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –≤ generateLocalForecastSection.");
  }

  // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨: –î–æ–±–∞–≤–ª—è–µ–º '|| []' –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö ---
  const dataPayload = {
    dates: buildDateLabels(weatherData.time || [], CONFIG.LOCATION.TIMEZONE),
    temperature_max: (weatherData.temperature_2m_max || []).map(t => t?.toFixed(0)),
    temperature_min: (weatherData.temperature_2m_min || []).map(t => t?.toFixed(0)),
    wind_speed_max: (weatherData.wind_speed_10m_max || []).map(w => w?.toFixed(1)),
    wind_gusts_max: (weatherData.wind_gusts_10m_max || []).map(w => w?.toFixed(1)),
    wind_direction: (weatherData.wind_direction_dominant || []).map(d => d.compass),
  };

  const prompt = `
–¢–≤–æ—è —Ä–æ–ª—å: –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–æ–≥–æ–¥–µ –≤ –†–∏–≥–µ.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å —è—Å–Ω—ã–π, –¥–µ—Ç–∞–ª—å–Ω—ã–π –∏ –Ω–µ–º–Ω–æ–≥–æ –æ–±—Ä–∞–∑–Ω—ã–π –∞–±–∑–∞—Ü –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –Ω–µ–¥–µ–ª—é, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –°–¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –¥–∏–Ω–∞–º–∏–∫–µ: –∫–∞–∫ –º–µ–Ω—è–µ—Ç—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –∫–æ–≥–¥–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–∞–º—ã–π —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä. –ü–∏—à–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –∑–∞–±–æ—Ç–ª–∏–≤—ã–º —Ç–æ–Ω–æ–º, –±—É–¥—Ç–æ –¥–µ–ª–∏—à—å—Å—è –Ω–æ–≤–æ—Å—Ç—è–º–∏ —Å —Å–æ—Å–µ–¥–æ–º –ø–æ –ª–µ—Å—Ç–Ω–∏—á–Ω–æ–π –∫–ª–µ—Ç–∫–µ.

–î–ê–ù–ù–´–ï:
${JSON.stringify(dataPayload, null, 2)}
`;

  try {
    const { genAI, modelName, generationConfig } = geminiConfig;
    const model = genAI.getGenerativeModel({ model: modelName, generationConfig });
    const result = await model.generateContent(prompt);
    return `${HEADING}\n\n${result.response.text().trim()}`;
  } catch (e) {
    console.error("    -> –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ:", e.message);
    return `${HEADING}\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.`;
  }
}

