/**
 * marine-forecast.js
 * v2.1 (Hardened)
 * - –ó–∞—â–∏—Ç–∞ –æ—Ç null/undefined –∏ –Ω–µ-—á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (—Å—Ç—Ä–æ–∫–∏ –∏ —Ç.–ø.)
 * - –ê–∫–∫—É—Ä–∞—Ç–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã, —á—Ç–æ–±—ã —Ä–∞–∑–¥–µ–ª –≤—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è
 */

const HEADING = "üåä –ú–æ—Ä—Å–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑";

const toNum = (v) => {
  const n = Number(v);
  return Number.isFinite(n) ? n : null;
};
const fmt = (v, digits = 1) =>
  (typeof v === "number" && Number.isFinite(v) ? v.toFixed(digits) : "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");

export async function generateMarineSection(marineData, geminiConfig) {
  if (!marineData || typeof marineData !== "object") {
    return `${HEADING}\n\n–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –º–æ—Ä–µ —Å–µ–≥–æ–¥–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.`;
  }

  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–ª–∏–∞—Å—ã –ø–æ–ª–µ–π –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  const tempRaw =
    marineData.temperature ??
    marineData.seaTemp ??
    marineData.sea_temperature ??
    marineData.sea_surface_temperature ??
    marineData.seaSurfaceTemperature ??
    marineData.water_temperature;

  const waveRaw =
    marineData.wave_height ??
    marineData.waveHeight ??
    marineData.swell_height ??
    marineData.swellHeight;

  const temp = toNum(tempRaw);
  const wave = toNum(waveRaw);

  const hasTemp = typeof temp === "number";
  const hasWave = typeof wave === "number";

  const fallbackSummary = () => {
    const parts = [];
    if (!hasTemp && !hasWave) {
      parts.push(
        "–ú–æ—Ä—Å–∫–∞—è —Å–ª—É–∂–±–∞ –ø–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∞ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –≤–æ–¥—ã –∏ –≤—ã—Å–æ—Ç–µ –≤–æ–ª–Ω. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –≤–æ–¥—É."
      );
    } else {
      if (hasTemp) {
        parts.push(`–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã –¥–µ—Ä–∂–∏—Ç—Å—è –æ–∫–æ–ª–æ ${fmt(temp, 1)}¬∞C.`);
      } else {
        parts.push("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã –ø–æ–∫–∞ –±–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ –µ—ë –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º.");
      }

      if (hasWave) {
        parts.push(`–í—ã—Å–æ—Ç–∞ –≤–æ–ª–Ω—ã –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ ${fmt(wave, 1)} –º.`);
      } else {
        parts.push("–í—ã—Å–æ—Ç–∞ –≤–æ–ª–Ω—ã –Ω–µ —Å–æ–æ–±—â–∞–µ—Ç—Å—è, –¥–µ—Ä–∂–∏—Ç–µ —Å–≤—è–∑—å —Å –ø–æ—Ä—Ç–æ–≤–æ–π —Å–ª—É–∂–±–æ–π –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π.");
      }

      parts.push("–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –±—é–ª–ª–µ—Ç–µ–Ω–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã—Ö–æ–¥ –∫ –≤–µ—á–µ—Ä—É.");
    }

    return `${HEADING}\n\n${parts.join(" ")}`;
  };

  if (!hasTemp && !hasWave) {
    return fallbackSummary();
  }

  const dataPayload = {
    water_temperature: fmt(temp, 1), // ¬∞C
    wave_height: fmt(wave, 1),       // –º
  };

  const prompt = `
–¢–≤–æ—è —Ä–æ–ª—å: –ú–æ—Ä—Å–∫–æ–π —Å–∏–Ω–æ–ø—Ç–∏–∫, –∫–∞–ø–∏—Ç–∞–Ω –¥–∞–ª—å–Ω–µ–≥–æ –ø–ª–∞–≤–∞–Ω–∏—è –Ω–∞ –ø–µ–Ω—Å–∏–∏.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∞–±–∑–∞—Ü –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –ø–æ–±–µ—Ä–µ–∂—å–µ –†–∏–∂—Å–∫–æ–≥–æ –∑–∞–ª–∏–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π –º–æ—Ä—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ –æ–±—ã—á–Ω—ã–º –ª—é–¥—è–º. –¢–æ–Ω ‚Äî –¥—Ä—É–∂–µ—Å–∫–∏–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –∫–∞–∫ —É –æ–ø—ã—Ç–Ω–æ–≥–æ —à–∫–∏–ø–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∏—Ç—Å—è —Å–æ–≤–µ—Ç–∞–º–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π.

–î–ê–ù–ù–´–ï:
- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: ${dataPayload.water_temperature}¬∞C
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –≤–æ–ª–Ω—ã: ${dataPayload.wave_height} –º
`;

  try {
    if (!geminiConfig?.genAI || !hasTemp || !hasWave) {
      // –§–æ–ª–ª–±–µ–∫ –±–µ–∑ –ò–ò ‚Äî —á—Ç–æ–±—ã –ø–∞–π–ø–ª–∞–π–Ω –Ω–µ –ø–∞–¥–∞–ª, –¥–∞–∂–µ –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –ø—É—Å—Ç–æ–π
      return fallbackSummary();
    }

    const { genAI, modelName, generationConfig } = geminiConfig;
    const model = genAI.getGenerativeModel({ model: modelName, generationConfig });
    const result = await model.generateContent(prompt);
    return `${HEADING}\n\n${result.response.text().trim()}`;
  } catch (e) {
    console.error("    -> –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ –æ –º–æ—Ä–µ:", e.message);
    return fallbackSummary();
  }
}
