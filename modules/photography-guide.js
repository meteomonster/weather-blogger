/**
 * photography-guide.js
 * –†–∞–∑–¥–µ–ª "–ì–∏–¥ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞" —Å –∑–æ–ª–æ—Ç—ã–º–∏ —á–∞—Å–∞–º–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –¥–ª—è –Ω–æ—á–Ω–æ–π —Å—ä—ë–º–∫–∏.
 */

function toDate(iso) {
  return new Date(`${iso}T12:00:00Z`);
}

function formatDateLabel(iso, timezone, options) {
  const date = toDate(iso);
  return new Intl.DateTimeFormat("ru-RU", { timeZone: timezone, ...options }).format(date);
}

function formatTime(iso, timezone) {
  if (!iso) return "‚Äî";
  const parsed = new Date(iso);
  if (!Number.isNaN(parsed.getTime())) {
    return new Intl.DateTimeFormat("ru-RU", { hour: "2-digit", minute: "2-digit", timeZone: timezone }).format(parsed);
  }
  return iso.slice(11, 16) || "‚Äî";
}

function formatWindow(window) {
  if (!window || window.start == null || window.end == null) return "‚Äî";
  const toTime = (minutes) => {
    const hrs = Math.floor(minutes / 60) % 24;
    const mins = minutes % 60;
    return `${hrs.toString().padStart(2, "0")}:${mins.toString().padStart(2, "0")}`;
  };
  return `${toTime(window.start)}‚Äì${toTime(window.end)}`;
}

function describeCloud(value) {
  if (typeof value !== "number") return "–æ–±–ª–∞—á–Ω–æ—Å—Ç—å –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö";
  const percent = Math.round(value);
  if (percent <= 15) return `–ø–æ—á—Ç–∏ —á–∏—Å—Ç–æ–µ –Ω–µ–±–æ (~${percent}%)`;
  if (percent <= 40) return `–ª–µ–≥–∫–∞—è –¥—ã–º–∫–∞ (~${percent}%)`;
  if (percent <= 70) return `–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å (~${percent}%)`;
  if (percent <= 90) return `–≥—É—Å—Ç—ã–µ –æ–±–ª–∞–∫–∞ (~${percent}%)`;
  return `–ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–æ (~${percent}%)`;
}

function describeTransparency(value) {
  if (typeof value !== "number") return "–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞";
  if (value < 0.08) return `–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∫—Ä–∏—Å—Ç–∞–ª—å–Ω–∞—è (AOD ~${value.toFixed(2)})`;
  if (value < 0.15) return `—Å–ª–µ–≥–∫–∞ –¥—ã–º–∫–∞ (AOD ~${value.toFixed(2)})`;
  if (value < 0.25) return `–∑–∞–º–µ—Ç–Ω–∞—è –¥—ã–º–∫–∞ (AOD ~${value.toFixed(2)})`;
  return `–ø–ª–æ—Ç–Ω–∞—è –ø–µ–ª–µ–Ω–∞ (AOD ~${value.toFixed(2)})`;
}

function describeVisibility(value) {
  if (typeof value !== "number") return "–≤–∏–¥–∏–º–æ—Å—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞";
  const km = value / 1000;
  if (km >= 20) return "–≤–∏–¥–∏–º–æ—Å—Ç—å 20+ –∫–º";
  if (km >= 10) return `–≤–∏–¥–∏–º–æ—Å—Ç—å ${km.toFixed(0)} –∫–º`;
  if (km >= 5) return `–≤–∏–¥–∏–º–æ—Å—Ç—å ${km.toFixed(1)} –∫–º`;
  return `–≤–∏–¥–∏–º–æ—Å—Ç—å ${km.toFixed(1)} –∫–º`;
}

function describeMoonPhase(phase) {
  if (typeof phase !== "number") return "—Ñ–∞–∑–∞ –õ—É–Ω—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞";
  if (phase < 0.05) return "–Ω–æ–≤–æ–ª—É–Ω–∏–µ";
  if (phase < 0.23) return "—Ä–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø";
  if (phase < 0.27) return "–ø–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å";
  if (phase < 0.48) return "—Ä–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞";
  if (phase < 0.52) return "–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ";
  if (phase < 0.73) return "—É–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞";
  if (phase < 0.77) return "–ø–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å";
  if (phase < 0.95) return "—Å—Ç–∞—Ä–µ—é—â–∏–π —Å–µ—Ä–ø";
  return "–Ω–æ–≤–æ–ª—É–Ω–∏–µ";
}

function milkyWayHint(day, timezone) {
  const phase = typeof day.moonPhase === "number" ? day.moonPhase : null;
  const illumination = phase == null ? null : phase <= 0.5 ? phase * 2 : (1 - phase) * 2;
  const moonRise = formatTime(day.moonrise, timezone);
  const moonSet = formatTime(day.moonset, timezone);
  const clouds = typeof day.night.cloud === "number" ? day.night.cloud : 100;
  const transparency = day.night.transparency;

  if (illumination != null && illumination < 0.2 && clouds < 50 && typeof transparency === "number" && transparency < 0.18) {
    return `–ú–ª–µ—á–Ω—ã–π –ü—É—Ç—å –æ–±–µ—â–∞–µ—Ç —è—Ä–∫–∏–µ –ø–æ–ª–æ—Å—ã: –õ—É–Ω–∞ –Ω–µ –º–µ—à–∞–µ—Ç (–≤–æ—Å—Ö–æ–¥ ${moonRise}, –∑–∞—Ö–æ–¥ ${moonSet}).`;
  }
  if (illumination != null && illumination < 0.4) {
    return `–®–∞–Ω—Å –ø–æ–π–º–∞—Ç—å –ú–ª–µ—á–Ω—ã–π –ü—É—Ç—å –µ—Å—Ç—å, –Ω–æ –ª—ë–≥–∫–∞—è –ª—É–Ω–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ (–≤–æ—Å—Ö–æ–¥ ${moonRise}).`;
  }
  return `–õ—É–Ω–Ω—ã–π —Å–≤–µ—Ç –±—É–¥–µ—Ç –∑–∞–º–µ—Ç–µ–Ω ‚Äî –∏—â–∏—Ç–µ —Å–∏–ª—É—ç—Ç—ã, –∑–∞–∫–∞—Ç—ã –∏ –≥–æ—Ä–æ–¥—Å–∫–æ–π –Ω–µ–æ–Ω (–õ—É–Ω–∞: –≤–æ—Å—Ö–æ–¥ ${moonRise}, –∑–∞—Ö–æ–¥ ${moonSet}).`;
}

function pickStarHighlight(dateIso) {
  const month = toDate(dateIso).getUTCMonth();
  const highlights = [
    "–Æ–ø–∏—Ç–µ—Ä —Å–∏—è–µ—Ç –Ω–∞–¥ —é–≥–æ-–≤–æ—Å—Ç–æ–∫–æ–º ‚Äî –±–µ—Ä–∏—Ç–µ —Ç–µ–ª–µ–æ–±—ä–µ–∫—Ç–∏–≤ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –¥–∏—Å–∫–æ–≤.",
    "–í–µ–Ω–µ—Ä–∞ –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ –¥–∞—ë—Ç —è—Ä–∫–∏–π –º–∞—è–∫ –¥–ª—è —Ç–∞–π–º–ª–∞–ø—Å–æ–≤.",
    "–û—Ö–æ—Ç—å—Ç–µ—Å—å –∑–∞ –°–µ—Ä–ø–æ–º –º–æ–ª–æ–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ –≤–æ–¥–µ.",
    "–°–∞—Ç—É—Ä–Ω –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏ ‚Äî –∫–æ–ª—å—Ü–∞ –≤–∏–¥–Ω—ã –≤ —Ç–µ–ª–µ—Å–∫–æ–ø—ã.",
    "–ö–∞–ø–ª–∏ —Ä–æ—Å—ã –Ω–∞ –º–∞–∫—Ä–æ-–æ–±—ä–µ–∫—Ç–∏–≤–∞—Ö –ø—Ä–µ–≤—Ä–∞—Ç—è—Ç —Ç—Ä–∞–≤—É –≤ —Å–∫–∞–∑–∫—É.",
    "–°—Ç–∞—Ä—Ç—É–µ—Ç —Å–µ–∑–æ–Ω –ú–ª–µ—á–Ω–æ–≥–æ –ü—É—Ç–∏ ‚Äî —à–∏—Ä–æ–∫–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏ —à—Ç–∞—Ç–∏–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.",
    "–°–æ–∑–≤–µ–∑–¥–∏–µ –õ–µ–±–µ–¥—è –≤ –∑–µ–Ω–∏—Ç–µ ‚Äî –∏—â–∏—Ç–µ —Å–∏–ª—É—ç—Ç—ã –¥–µ—Ä–µ–≤—å–µ–≤ –Ω–∞ —Ñ–æ–Ω–µ –º–ª–µ—á–Ω—ã—Ö –æ–±–ª–∞–∫–æ–≤.",
    "–ü–µ—Ä—Å–µ–∏–¥—ã –Ω–∞ –ø–∏–∫–µ ‚Äî –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–ª–∏–Ω–Ω—ã–µ –≤—ã–¥–µ—Ä–∂–∫–∏.",
    "–ó–æ–ª–æ—Ç–∞—è –æ—Å–µ–Ω—å —Ä–∞–∑–≥–æ—Ä–∞–µ—Ç—Å—è ‚Äî –ª–æ–≤–∏—Ç–µ –∫–æ–Ω—Ç—Ä–æ–≤—ã–π —Å–≤–µ—Ç –Ω–∞ –ª–∏—Å—Ç—å—è—Ö.",
    "–ú–∞—Ä—Å –±–ª–∏–∑–æ–∫ –∫ –æ–ø–ø–æ–∑–∏—Ü–∏–∏ ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—ä—ë–º–∫—É —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Å–∫–æ–ø.",
    "–§–µ–π–µ—Ä–≤–µ—Ä–∫ –∑–≤—ë–∑–¥ –û—Ä–∏–æ–Ω–∞ ‚Äî —Ä–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ –ø–æ–¥–∞—Ä–∏—Ç —è—Ä–∫–∏–µ —Ç—É–º–∞–Ω–Ω–æ—Å—Ç–∏.",
    "–ú–µ—Ç–µ–æ—Ä–Ω—ã–π –ø–æ—Ç–æ–∫ –ì–µ–º–∏–Ω–∏–¥—ã —Ä–∞—Å–∫—Ä–∞—Å–∏—Ç –¥–µ–∫–∞–±—Ä—å—Å–∫–æ–µ –Ω–µ–±–æ.",
  ];
  return highlights[month % highlights.length];
}

export async function generatePhotographyGuideSection(photographyData) {
  if (!photographyData || !photographyData.days?.length) {
    return "üì∏ –ì–∏–¥ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞: –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.";
  }

  const timezone = photographyData.timezone || "Europe/Riga";
  const today = photographyData.days[0];
  const todayLabel = formatDateLabel(today.date, timezone, { weekday: "long", day: "numeric", month: "long" });

  const morningWindow = formatWindow(today.morning.window);
  const eveningWindow = formatWindow(today.evening.window);
  const morningCloud = describeCloud(today.morning.cloud);
  const eveningCloud = describeCloud(today.evening.cloud);
  const nightCloud = describeCloud(today.night.cloud);
  const transparencyText = describeTransparency(today.night.transparency);
  const visibilityText = describeVisibility(today.night.visibility);
  const moonPhaseText = describeMoonPhase(today.moonPhase);
  const milkyWayText = milkyWayHint(today, timezone);
  const starHighlight = pickStarHighlight(today.date);

  const outlookLines = photographyData.days.slice(1).map((day) => {
    const label = formatDateLabel(day.date, timezone, { weekday: "short", day: "numeric" });
    const evening = formatWindow(day.evening.window);
    const cloud = describeCloud(day.evening.cloud);
    return `- ${label}: –≤–µ—á–µ—Ä–Ω–µ–µ –æ–∫–Ω–æ ${evening}, ${cloud}.`;
  });

  return [
    "üì∏ –ì–∏–¥ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞",
    `${todayLabel.charAt(0).toUpperCase()}${todayLabel.slice(1)}:`,
    "–ó–æ–ª–æ—Ç—ã–µ —á–∞—Å—ã:",
    `‚Ä¢ –£—Ç—Ä–æ ${morningWindow} ‚Äî ${morningCloud}.`,
    `‚Ä¢ –í–µ—á–µ—Ä ${eveningWindow} ‚Äî ${eveningCloud}.`,
    "–ù–æ—á–Ω–æ–µ –Ω–µ–±–æ:",
    `‚Ä¢ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${nightCloud}.`,
    `‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: ${transparencyText}, ${visibilityText}.`,
    `‚Ä¢ –õ—É–Ω–∞: ${moonPhaseText}.`,
    `‚Ä¢ ${milkyWayText}`,
    `‚ú® –ó–≤–µ–∑–¥–∞ –¥–Ω—è: ${starHighlight}`,
    outlookLines.length ? "–í–∑–≥–ª—è–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–µ—á–µ—Ä–∞:" : "",
    outlookLines.join("\n"),
  ]
    .filter(Boolean)
    .join("\n\n");
}
